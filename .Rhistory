# TODO: Add comment
# Author: Brad
# File: FA_Analysis.R
# Version: 1.0
# Date: 07.10.2013
# Purpose: Analyze Fund Advertising
############################################################################### INITIAL SETUP;
cat("SECTION: INITIAL SETUP", "\n")
###############################################################################
# Clear workspace
rm(list = ls(all = TRUE))
# Limit History to not exceed 50 lines
Sys.setenv(R_HISTSIZE = 500)
repo <- c("http://cran.us.r-project.org")
options(repos = structure(repo))
options(install.packages.check.source = FALSE)
# String as factors is False -- used for read.csv
options(StringsAsFactors = FALSE)
# Default maxprint option
options(max.print = 500)
# options(max.print=99999)
# Memory limit
memory.limit(size = 8183)
# Set location (1=HOME,2=WORK,3=CORALSEA FROM HOME,4=CORALSEA FROM WORK) Location <- 1
Location <- 2
if (Location == 1) {
setwd("")
input_directory <- normalizePath("", winslash = "\\", mustWork = NA)
output_directory <- normalizePath("", winslash = "\\", mustWork = NA)
function_directory <- normalizePath("C:/Users/Brad/Dropbox/Research/R/", winslash = "\\", mustWork = NA)
} else if (Location == 2) {
setwd("H:/Research/Mutual_Fund_Advertising/R/")
input_directory <- normalizePath("H:/Research/Mutual_Fund_Advertising/Data/", winslash = "\\", mustWork = NA)
output_directory <- normalizePath("C:/Users/bdaughdr/Dropbox/Research/Fund_Advertising/R/", winslash = "\\", mustWork = NA)
function_directory <- normalizePath("C:/Users/bdaughdr/Dropbox/Research/R/", winslash = "\\", mustWork = NA)
} else if (Location == 3) {
setwd("H:/Research/Mutual_Fund_Advertising/R/")
input_directory <- normalizePath("H:/Research/Mutual_Fund_Advertising/Data/", winslash = "\\", mustWork = NA)
output_directory <- normalizePath("//tsclient/C/Users/Brad/Dropbox/Research/Fund_Advertising/R/", winslash = "\\", mustWork = NA)
function_directory <- normalizePath("//tsclient/C/Users/Brad/Dropbox/Research/R/", winslash = "\\", mustWork = NA)
} else if (Location == 4) {
setwd("H:/Research/Mutual_Fund_Advertising/R/")
input_directory <- normalizePath("H:/Research/Mutual_Fund_Advertising/Data/", winslash = "\\", mustWork = NA)
output_directory <- normalizePath("//tsclient/C/Users/bdaughdr/Dropbox/Research/Fund_Advertising/R/", winslash = "\\", mustWork = NA)
function_directory <- normalizePath("//tsclient/C/Users/bdaughdr/Dropbox/Research/R/", winslash = "\\", mustWork = NA)
} else {
cat("ERROR ASSIGNING DIRECTORIES", "\n")
}
rm(Location)
############################################################################### FUNCTIONS;
cat("SECTION: FUNCTIONS", "\n")
###############################################################################
source(file = paste(function_directory, "functions_db.R", sep = ""), echo = FALSE)
source(file = paste(function_directory, "functions_statistics.R", sep = ""), echo = FALSE)
source(file = paste(function_directory, "functions_text_analysis.R", sep = ""), echo = FALSE)
source(file = paste(function_directory, "functions_utilities.R", sep = ""), echo = FALSE)
describe2 <- function(x) {
# x <- descrip_stats_fund2[,-match('yr',names(descrip_stats_fund2))]
var <- colnames(x)
var <- as.data.frame(var, stringsAsFactors = FALSE)
get_stats <- function(column, data) {
# column <- 'sentences_iois' data <- x group_var <- group
text01 <- paste0("var='", column, "',")
text02 <- paste0("n=sum(!is.na(", column, ")),")
text03 <- paste0("mean=mean(", column, ",na.rm=TRUE),")
text04 <- paste0("sd=sd(", column, ",na.rm=TRUE),")
text05 <- paste0("mode=names(sort(-table(", column, ")))[1],")
text06 <- paste0("mad=mad(", column, ",na.rm=TRUE),")
text07 <- paste0("range=max(", column, ",na.rm=TRUE)-min(", column, ",na.rm=TRUE),")
text08 <- paste0("skew=skew(", column, ", na.rm=TRUE,type=3),")
text09 <- paste0("kurtosis=kurtosi(", column, ", na.rm=TRUE,type=3),")
text10 <- paste0("se=(sd(", column, ",na.rm=TRUE)/sqrt(sum(!is.na(", column, ")))),")
text11 <- paste0("min=min(", column, ",na.rm=TRUE),")
text12 <- paste0("decile1=quantile(", column, ", probs=0.10,na.rm=TRUE),")
text13 <- paste0("quintile1=quantile(", column, ", probs=0.20,na.rm=TRUE),")
text14 <- paste0("quartile1=quantile(", column, ", probs=0.25,na.rm=TRUE),")
text15 <- paste0("decile3=quantile(", column, ", probs=0.30,na.rm=TRUE),")
text16 <- paste0("quintile2=quantile(", column, ", probs=0.40,na.rm=TRUE),")
text17 <- paste0("median=quantile(", column, ", probs=0.50,na.rm=TRUE),")
text18 <- paste0("quintile3=quantile(", column, ", probs=0.60,na.rm=TRUE),")
text19 <- paste0("decile7=quantile(", column, ", probs=0.70,na.rm=TRUE),")
text20 <- paste0("quartile3=quantile(", column, ", probs=0.75,na.rm=TRUE),")
text21 <- paste0("quintile4=quantile(", column, ", probs=0.80,na.rm=TRUE),")
text22 <- paste0("decile9=quantile(", column, ", probs=0.90,na.rm=TRUE),")
text23 <- paste0("max=max(", column, ",na.rm=TRUE)")
str <- paste0("list(", text01, text02, text03, text04, text05, text06, text07, text08, text09, text10, text11, text12, text13, text14,
text15, text16, text17, text18, text19, text20, text21, text22, text23, ")")
expr <- parse(text = str)
a_dt <- data.table(data)
b <- as.data.frame(a_dt[, eval(expr)], stringsAsFactors = FALSE)
return(b)
}
cc <- apply(var, 1, get_stats, data = x)
dd <- do.call("rbind", cc)
return(dd)
}
describeBy2 <- function(x, group) {
# x <- descrip_stats_iois2 group <- 'yr'
var <- colnames(x[, -match(group, names(x))])
var <- as.data.frame(var, stringsAsFactors = FALSE)
get_stats_yr <- function(column, data, group_var) {
# column <- 'sentences_iois' data <- x group_var <- group
text01 <- paste0("var='", column, "',")
text02 <- paste0("n=sum(!is.na(", column, ")),")
text03 <- paste0("mean=mean(", column, ",na.rm=TRUE),")
text04 <- paste0("sd=sd(", column, ",na.rm=TRUE),")
text05 <- paste0("mode=names(sort(-table(", column, ")))[1],")
text06 <- paste0("mad=mad(", column, ",na.rm=TRUE),")
text07 <- paste0("range=max(", column, ",na.rm=TRUE)-min(", column, ",na.rm=TRUE),")
text08 <- paste0("skew=skew(", column, ", na.rm=TRUE,type=3),")
text09 <- paste0("kurtosis=kurtosi(", column, ", na.rm=TRUE,type=3),")
text10 <- paste0("se=(sd(", column, ",na.rm=TRUE)/sqrt(sum(!is.na(", column, ")))),")
text11 <- paste0("min=min(", column, ",na.rm=TRUE),")
text12 <- paste0("decile1=quantile(", column, ", probs=0.10,na.rm=TRUE),")
text13 <- paste0("quintile1=quantile(", column, ", probs=0.20,na.rm=TRUE),")
text14 <- paste0("quartile1=quantile(", column, ", probs=0.25,na.rm=TRUE),")
text15 <- paste0("decile3=quantile(", column, ", probs=0.30,na.rm=TRUE),")
text16 <- paste0("quintile2=quantile(", column, ", probs=0.40,na.rm=TRUE),")
text17 <- paste0("median=quantile(", column, ", probs=0.50,na.rm=TRUE),")
text18 <- paste0("quintile3=quantile(", column, ", probs=0.60,na.rm=TRUE),")
text19 <- paste0("decile7=quantile(", column, ", probs=0.70,na.rm=TRUE),")
text20 <- paste0("quartile3=quantile(", column, ", probs=0.75,na.rm=TRUE),")
text21 <- paste0("quintile4=quantile(", column, ", probs=0.80,na.rm=TRUE),")
text22 <- paste0("decile9=quantile(", column, ", probs=0.90,na.rm=TRUE),")
text23 <- paste0("max=max(", column, ",na.rm=TRUE)")
str <- paste0("list(", text01, text02, text03, text04, text05, text06, text07, text08, text09, text10, text11, text12, text13, text14,
text15, text16, text17, text18, text19, text20, text21, text22, text23, ")")
expr <- parse(text = str)
a_dt <- data.table(data, c(group_var))
b <- as.data.frame(a_dt[, eval(expr), by = group_var], stringsAsFactors = FALSE)
return(b)
}
cc <- apply(var, 1, get_stats_yr, data = x, group_var = group)
dd <- do.call("rbind", cc)
return(dd[order(dd[, group]), ])
}
quantile_dvs <- function(w, data, group_var, quantile_data, quantile_col_low, quantile_col_high) {
# w <- quintile_vars_iois[1] data <- text_stats_iois group_var <- c('wficn','yr','month') quantile_data <- quintile_vars_data_iois
# quantile_col_low <- 'quintile1' quantile_col_high <- 'quintile4'
data_trim <- data[, append(group_var, w)]
quintile_data_trim <- quantile_data[quantile_data[, "var"] == w, ]
quintile_data_trim <- quintile_data_trim[, -match("var", names(quintile_data_trim))]
quintile_data_trim <- data.frame(quintile_data_trim, temp_q_low = NA, temp_q_high = NA)
data_full <- merge(data_trim, quintile_data_trim, by.x = c("yr"), by.y = c("yr"), all.x = TRUE, all.y = FALSE, sort = TRUE, suffixes = c(".x",
".y"), incomparables = NA)
data_full[, "temp_q_low"] <- ifelse((data_full[, w] < data_full[, quantile_col_low]), 1, 0)
data_full[, "temp_q_low"] <- ifelse(is.na(data_full[, w]), NA, data_full[, "temp_q_low"])
data_full[, "temp_q_high"] <- ifelse((data_full[, w] > data_full[, quantile_col_high]), 1, 0)
data_full[, "temp_q_high"] <- ifelse(is.na(data_full[, w]), NA, data_full[, "temp_q_high"])
colnames(data_full)[match("temp_q_low", names(data_full))] <- paste(w, "below", quantile_col_low, sep = "_")
colnames(data_full)[match("temp_q_high", names(data_full))] <- paste(w, "above", quantile_col_high, sep = "_")
return(data_full[, -match(c(w, quantile_col_low, quantile_col_high), names(data_full))])
}
quantile_cast_merge <- function(w, group, quantile_num) {
# w <- quintiles_melt[quintiles_melt[,'yr']==1999,] group <- 'fyear' quantile_num <- 5
merge_table <- unique(w[, c("temp_id", group, "variable")])
quintile_u <- sort(unique(w[, "quantile"]))
for (i in 1:length(quintile_u)) {
# i <- 1
v <- w[w[, "quantile"] == quintile_u[i], ]
v <- v[!is.na(v[, "value"]), ]
colnames(v)[match(c("value"), names(v))] <- quintile_u[i]
v[, "temp_id"] <- seq(1, nrow(v))
merge_table <- merge(merge_table, v[, -match(c("quantile"), names(v))], by.x = c("temp_id", group, "variable"), by.y = c("temp_id",
group, "variable"), all.x = TRUE, all.y = FALSE, sort = TRUE, suffixes = c(".x", ".y"), incomparables = NA)
}
merge_table <- merge_table[!(rowSums(is.na(merge_table[, 4:ncol(merge_table)])) == quantile_num), ]
return(merge_table)
}
quantile_cast_cuts <- function(z, split_var, quantile_num) {
# z <- data_trim[data_trim[,'yr']==1999,] split_var <- x quantile_num <- 5
eps <- .Machine$double.eps
df <- data.frame(z, quantile = as.integer(with(z, cut(z[, split_var], breaks = quantile(z[, split_var], probs = (0:quantile_num)/quantile_num,
na.rm = TRUE) + eps * (0:quantile_num), include.lowest = TRUE))), stringsAsFactors = FALSE)
return(df)
}
quantile_yr_cast <- function(x, data, dep_var, group_var, quantile_count) {
# x <- univariate_vars[21] x <- univariate_vars[27]
# data <- data_all_univariate dep_var <- 'pct_flow' group_var <- 'yr' quantile_count <- 5
data_trim <- data[, c(dep_var, group_var, x)]
data_trim <- data_trim[!is.na(data_trim[, x]), ]
quantiles <- ddply(data_trim, group_var, quantile_cast_cuts, split_var = x, quantile_num = quantile_count)
quantiles_melt <- melt(quantiles, c(group_var, "quantile"), dep_var)
quantiles_melt <- ddply(quantiles_melt, c("yr", "variable"), function(y) {
data.frame(temp_id = seq(1, nrow(y)), y, stringsAsFactors = FALSE)
})
quantiles_melt_cast <- ddply(quantiles_melt, c("yr"), quantile_cast_merge, quantile_num = quantile_count)
quantiles_melt_cast <- subset(quantiles_melt_cast, select = -temp_id)
return(data.frame(cut_var = x, quantiles_melt_cast, stringsAsFactors = FALSE))
}
quantile_cast <- function(x, data, dep_var, group_var, quantile_count) {
# x <- univariate_vars[21] x <- univariate_vars[27]
# data <- data_all_univariate dep_var <- 'pct_flow' group_var <- 'yr' quantile_count <- 5
data_trim <- data[, c(dep_var, group_var, x)]
data_trim <- data_trim[!is.na(data_trim[, x]), ]
quantiles <- quantile_cast_cuts(data_trim, split_var = x, quantile_num = quantile_count)
quantiles_melt <- melt(quantiles, c(group_var, "quantile"), dep_var)
quantiles_melt <- ddply(quantiles_melt, c(group_var, "variable"), function(y) {
data.frame(temp_id = seq(1, nrow(y)), y, stringsAsFactors = FALSE)
})
quantiles_melt_cast <- ddply(quantiles_melt, c(group_var), quantile_cast_merge, group = group_var, quantile_num = quantile_count)
quantiles_melt_cast <- subset(quantiles_melt_cast, select = -temp_id)
return(data.frame(cut_var = x, quantiles_melt_cast, stringsAsFactors = FALSE))
}
diff_in_mean <- function(x, var_col, yr_col, quantile_first_col, quantile_last_col) {
# x <- quintiles_pct_flow var_col <- 'cut_var' yr_col <- 'yr' quantile_first_col <- 'X1' quantile_last_col <- 'X5'
averages_quantile_cast <- ddply(x, c(yr_col, var_col), function(z) {
stats <- suppressWarnings(as.data.frame(describe(z[, -match(c(yr_col, var_col), names(z))], na.rm = TRUE, skew = FALSE, range = FALSE),
stringsAsFactors = FALSE))
stats[, "var"] <- row.names(stats)
return(stats)
})
colnames(averages_quantile_cast)[match(c("var"), names(averages_quantile_cast))] <- "quantile"
averages_quantile_cast2 <- ddply(averages_quantile_cast, c(yr_col), function(z) {
return(suppressMessages(dcast(z[c(yr_col, "quantile", var_col, "mean")], cut_var ~ quantile)))
})
averages_quantile_cast_ttest <- ddply(x, c(yr_col, var_col), function(z) {
# z <- x[x[,'variable']=='pct_flow',]
ftest_results <- var.test(z[, quantile_first_col], z[, quantile_last_col])
ttest_results <- t.test(z[, quantile_first_col], z[, quantile_last_col])
test_data <- data.frame(t_minus_b = (ttest_results$estimate[2] - ttest_results$estimate[1]), t_stat = ttest_results$statistic, t_p_val = ttest_results$p.value,
f_stat = ftest_results$statistic, f_p_val = ftest_results$p.value)
return(test_data)
})
combined_table <- merge(averages_quantile_cast2, averages_quantile_cast_ttest, by.x = c(yr_col, var_col), by.y = c(yr_col, var_col), all.x = TRUE,
all.y = FALSE, sort = FALSE, suffixes = c(".x", ".y"), incomparables = NA)
return(combined_table)
}
expand.dft <- function(x, var, na.strings = "NA", as.is = FALSE, dec = ".") {
# x <- test var <- 'cshr' na.strings <-
# Take each row in the source data frame table and replicate it # using the Freq value
DF <- sapply(1:nrow(x), function(i) x[rep(i, each = x[i, c(var)]), ], simplify = FALSE)
# Take the above list and rbind it to create a single DF Also subset the result to eliminate the Freq column
DF <- do.call("rbind", DF)
DF <- DF[, -match(var, names(DF))]
# Now apply type.convert to the character coerced factor columns to facilitate data type selection for each column
DF <- as.data.frame(lapply(DF, function(x) {
type.convert(as.character(x), na.strings = na.strings, as.is = as.is, dec = dec)
}))
# Return data frame
return(DF)
}
r2 <- function(x, adj = TRUE) {
pmodel.response <- plm:::pmodel.response.plm
## fetch response and residuals
y <- pmodel.response(x, model = "within")
myres <- resid(x)
n <- length(myres)
if (adj) {
adjssr <- x$df.residual
adjtss <- n - 1
} else {
adjssr <- 1
adjtss <- 1
}
ssr <- sum(myres^2)/adjssr
tss <- sum(y^2)/adjtss
return(1 - ssr/tss)
}
stata.clustering <- function(x, clu, res) {
x <- as.matrix(x)
clu <- as.vector(clu)
res <- as.vector(res)
fac <- unique(clu)
num.fac <- length(fac)
num.reg <- ncol(x)
u <- matrix(NA, nrow = num.fac, ncol = num.reg)
meat <- matrix(NA, nrow = num.reg, ncol = num.reg)
# outer terms (X'X)^-1
outer <- solve(t(x) %*% x)
# inner term sum_j u_j'u_j where u_j = sum_i e_i * x_i
for (i in seq(num.fac)) {
index.loop <- clu == fac[i]
res.loop <- res[index.loop]
x.loop <- x[clu == fac[i], ]
u[i, ] <- as.vector(colSums(res.loop * x.loop))
}
inner <- t(u) %*% u
#
V <- outer %*% inner %*% outer
return(V)
}
extract.plm2 <- function(model, vcov. = NULL, ...) {
require("sandwich")
if ("plm" %in% class(model) == FALSE) {
stop("Internal error: Incorrect model type! Should be a plm object!")
}
tab <- summary(model)$coef[, -3]
rs <- summary(model)$r.squared[1]
adj <- summary(model)$r.squared[2]
n.ind1 <- length(levels(as.factor(index(model)[, 1])))
n.ind2 <- length(levels(as.factor(index(model)[, 2])))
n <- n.ind1 + n.ind2
gof <- matrix(c(rs, adj, n), ncol = 1)
row.names(gof) <- c("R$^2$", "Adj. R$^2$", "Num. obs.")
table.content <- list(tab, gof)
res <- table.content
if (!is.null(vcov.)) {
FUN <- match.fun(vcov.)
tes <- coeftest(model, vcov = FUN(model, ...))
res[[1]][, "Std. Error"] <- tes[, "Std. Error"]
res[[1]][, "Pr(>|t|)"] <- tes[, "Pr(>|t|)"]
}
return(res)
}
